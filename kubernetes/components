Pods: Pods are the basic building blocks of a Kubernetes application. They represent a single instance of a running process within the cluster. A pod can encapsulate one or more containers that share resources, network, and storage. Pods are scheduled onto nodes and can be thought of as the smallest deployable units in Kubernetes.
Ingress: Ingress is an API object in Kubernetes that manages external access to services within a cluster. It provides a way to route incoming HTTP and HTTPS traffic to specific services based on host or path rules. Ingress typically acts as a reverse proxy, exposing HTTP and HTTPS routes to the outside world.
Services: Services provide a stable network endpoint for accessing a set of pods. They enable load balancing and automatic service discovery within the cluster. Services abstract away the dynamic nature of pods, allowing clients to access a logical group of pods without needing to know their specific IP addresses or ports.
Deployment: Deployments are used to define and manage the lifecycle of application deployments in Kubernetes. A deployment defines the desired state of the application, including the number of replicas (pods) to run, container images, and other configuration settings. Deployments handle the creation, updating, and scaling of pods, ensuring the desired state is maintained.
Namespace: Namespaces provide a way to divide a Kubernetes cluster into multiple virtual clusters. They are used to isolate resources and provide a scope for names. By default, Kubernetes has a "default" namespace, but you can create additional namespaces to organize and manage your resources.
ConfigMap: ConfigMaps are used to store configuration data as key-value pairs. They allow you to decouple configuration from the container images and make it easier to manage and update configuration data without redeploying the application.
Secret: Secrets are used to store sensitive information, such as passwords, tokens, or TLS certificates. They are encoded and stored securely within the cluster and can be mounted as files or exposed as environment variables in containers.
Persistent Volume (PV) and Persistent Volume Claim (PVC): PVs and PVCs are used to provide persistent storage in Kubernetes. A Persistent Volume represents a piece of network-attached storage in the cluster, while a Persistent Volume Claim is a request for storage by a user or application. PVCs bind to PVs to provide persistent storage to pods.
StatefulSet: StatefulSets are used to manage stateful applications that require stable network identities and persistent storage. They maintain a stable hostname and persistent volume for each pod, allowing stateful applications like databases to be deployed and managed in Kubernetes.
DaemonSet: DaemonSets ensure that a specific pod runs on every node in the cluster. They are often used for cluster-level services like log collection or monitoring agents, where each node requires an instance of the pod.
Job and CronJob: Jobs are used to run batch or one-time tasks in Kubernetes, while CronJobs schedule jobs to run periodically at specified times or intervals. They are commonly used for tasks like data processing, backups, or scheduled jobs.
Horizontal Pod Autoscaler (HPA): The Horizontal Pod Autoscaler automatically scales the number of pods based on CPU utilization or custom metrics. It ensures that the application has the desired level of resource allocation based on current demand.
Vertical Pod Autoscaler (VPA): The Vertical Pod Autoscaler adjusts the resource requests and limits of pods based on their actual resource usage. It optimizes resource allocation for individual pods by scaling up or down their resource specifications.
Service Account: Service accounts provide an identity for pods and processes running within pods to interact with other Kubernetes resources. They are used for authentication and authorization purposes, allowing fine-grained control over access to resources.
ClusterRole and Role: ClusterRoles and Roles define a set of permissions (RBAC rules) that can be assigned to users, groups, or service accounts. ClusterRoles apply cluster-wide, while Roles are specific to a particular namespace.
Volume Claim Template: A Volume Claim Template is used in StatefulSets to dynamically provision Persistent Volumes for each pod. It defines the storage requirements for the pods and automatically creates corresponding Persistent Volume Claims.
Pod Disruption Budget (PDB): A Pod Disruption Budget sets limits on the number of pods that can be simultaneously unavailable during maintenance or disruptive events. It ensures high availability by preventing excessive downtime or disruptions during updates or failures.
Network Policies: Network Policies allow fine-grained control over network traffic within a cluster. They define rules for ingress and egress traffic to and from pods, allowing administrators to enforce network segmentation and security policies.
Custom Resource Definition (CRD): CRDs enable users to define and use custom resources in Kubernetes. They extend the Kubernetes API and allow for the creation of custom controllers and operators to manage and interact with these resources.
Pod Presets: Pod Presets enable injecting additional configuration data or volumes into pods at runtime. They allow you to automatically inject common configurations, such as environment variables or volumes, into pods without modifying the pod's YAML definition.
ResourceQuota: ResourceQuota sets limits on the amount of compute resources (CPU, memory, storage) that a namespace or a user can consume within a Kubernetes cluster. It helps in enforcing resource usage limits and preventing resource contention.
Endpoint: An Endpoint represents a network endpoint associated with a Service. It maps a Service to a set of IP addresses and ports of the pods that back the Service, enabling direct communication with the Service.
Vertical Pod Autoscaler (VPA): The Vertical Pod Autoscaler adjusts the resource requests and limits of pods based on their actual resource usage. It optimizes resource allocation for individual pods by scaling up or down their resource specifications.
Event: Events are records of incidents, changes, or status updates that occur in a Kubernetes cluster. They provide visibility into cluster operations and can be used for monitoring and troubleshooting purposes.
Certificate: Kubernetes supports managing and issuing TLS certificates through the Certificate resource. It simplifies the process of managing certificates for securing communication between services in the cluster.
Service Mesh (e.g., Istio): A Service Mesh is a dedicated infrastructure layer that manages and controls service-to-service communication in a Kubernetes cluster. It provides advanced features like traffic routing, load balancing, circuit-breaking, and observability.
Custom Controllers and Operators: Custom Controllers and Operators extend the functionality of Kubernetes by implementing custom logic for managing and automating specific applications or infrastructure. They can monitor resources, respond to events, and perform actions to ensure desired state and behavior
